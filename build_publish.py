#!/usr/bin/env python3
"""
DST Vietnamese Ultimate - Build Publisher
T·∫°o b·∫£n publish s·∫°ch s·∫Ω ƒë·ªÉ upload l√™n Steam Workshop
"""

import os
import shutil
import sys
from pathlib import Path

# =============================================================================
# PUBLISH CONFIGURATION - D·ªÖ d√†ng c·∫≠p nh·∫≠t danh s√°ch files/folders
# =============================================================================

PUBLISH_CONFIG = {
    # Th∆∞ m·ª•c ƒë√≠ch
    "publish_dir": "dst-vietnamese-ultimate-publish",
    
    # Files ƒë∆°n l·∫ª c·∫ßn copy (file_name: description)
    "files": {
        # Core mod files
        "modinfo.lua": "Mod configuration",
        "modmain.lua": "Main mod script", 
        "modicon.tex": "DST mod icon texture",
        "modicon.xml": "DST mod icon atlas",
        
        # Workshop assets
        "preview.jpg": "Steam Workshop preview image",
        
        # Translation files
        "vietnamese.po": "Translation source file",
        "vietnamese.mo": "Compiled translation file",
        
        # Documentation
        "README.md": "Mod documentation",
        "LICENSE": "License file",
    },
    
    # Th∆∞ m·ª•c c·∫ßn copy to√†n b·ªô (folder_name: description)
    "directories": {
        "fonts": "Vietnamese font packages",
        "scripts": "Custom mod scripts",
    },
    
    # Files/folders b·ªè qua (kh√¥ng copy)
    "exclude": [
        ".git",
        ".vscode", 
        "tools",
        "modicon_source.png",
        ".gitignore",
        "build_publish.py",
        "__pycache__",
        "*.pyc",
        ".DS_Store",
    ]
}

def print_header():
    """In header ƒë·∫πp cho script"""
    print("=" * 50)
    print("üáªüá≥ DST Vietnamese Ultimate - Build Publisher")
    print("=" * 50)

def clean_publish_dir(publish_dir):
    """X√≥a v√† t·∫°o l·∫°i th∆∞ m·ª•c publish"""
    if publish_dir.exists():
        print(f"üßπ Cleaning old publish directory: {publish_dir}")
        shutil.rmtree(publish_dir)
    
    print(f"üìÅ Creating fresh publish directory: {publish_dir}")
    publish_dir.mkdir(parents=True, exist_ok=True)

def copy_files(config, publish_dir):
    """Copy c√°c files ƒë∆°n l·∫ª"""
    print("\nüìã Copying individual files...")
    
    copied_files = 0
    for file_name, description in config["files"].items():
        source_file = Path(file_name)
        
        if source_file.exists():
            dest_file = publish_dir / file_name
            shutil.copy2(source_file, dest_file)
            size = source_file.stat().st_size
            print(f"  ‚úÖ {file_name} ({size:,} bytes) - {description}")
            copied_files += 1
        else:
            print(f"  ‚ö†Ô∏è  {file_name} - File not found (skipped)")
    
    return copied_files

def copy_directories(config, publish_dir):
    """Copy c√°c th∆∞ m·ª•c"""
    print("\nüìÅ Copying directories...")
    
    copied_dirs = 0
    for dir_name, description in config["directories"].items():
        source_dir = Path(dir_name)
        
        if source_dir.exists() and source_dir.is_dir():
            dest_dir = publish_dir / dir_name
            shutil.copytree(source_dir, dest_dir)
            
            # ƒê·∫øm files trong th∆∞ m·ª•c
            file_count = len(list(dest_dir.rglob("*")))
            print(f"  ‚úÖ {dir_name}/ ({file_count} items) - {description}")
            copied_dirs += 1
        else:
            print(f"  ‚ö†Ô∏è  {dir_name}/ - Directory not found (skipped)")
    
    return copied_dirs

def calculate_publish_size(publish_dir):
    """T√≠nh t·ªïng dung l∆∞·ª£ng th∆∞ m·ª•c publish"""
    total_size = 0
    file_count = 0
    
    for file_path in publish_dir.rglob("*"):
        if file_path.is_file():
            total_size += file_path.stat().st_size
            file_count += 1
    
    return total_size, file_count

def print_summary(publish_dir, copied_files, copied_dirs):
    """In t√≥m t·∫Øt k·∫øt qu·∫£"""
    total_size, file_count = calculate_publish_size(publish_dir)
    size_mb = total_size / (1024 * 1024)
    
    print("\n" + "=" * 50)
    print("‚úÖ Build completed successfully!")
    print("=" * 50)
    print(f"üìÇ Publish directory: {publish_dir.absolute()}")
    print(f"üìä Total files: {file_count:,}")
    print(f"üì¶ Total size: {size_mb:.2f} MB ({total_size:,} bytes)")
    print(f"üìã Copied files: {copied_files}")
    print(f"üìÅ Copied directories: {copied_dirs}")
    
    print("\nüöÄ Ready for Workshop upload!")
    print("\nüí° Next steps:")
    print("   1. Open ModUploader in DST")
    print(f"   2. Browse to: {publish_dir.absolute()}")
    print("   3. Upload to Workshop!")
    print("\n" + "=" * 50)

def main():
    """Main function"""
    print_header()
    
    try:
        # ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c publish
        publish_dir = Path(PUBLISH_CONFIG["publish_dir"])
        
        # Clean v√† t·∫°o th∆∞ m·ª•c publish
        clean_publish_dir(publish_dir)
        
        # Copy files v√† directories
        copied_files = copy_files(PUBLISH_CONFIG, publish_dir)
        copied_dirs = copy_directories(PUBLISH_CONFIG, publish_dir)
        
        # In t√≥m t·∫Øt
        print_summary(publish_dir, copied_files, copied_dirs)
        
    except Exception as e:
        print(f"\n‚ùå Error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 