package main

import (
	"archive/zip"
	"fmt"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"sort"
)

// Usage: go run tools/gen_fonts_list.go
// It scans ./fonts directory for files ending with __vi.zip and writes scripts/fonts_list.lua
func main() {
	root := "fonts"
	re := regexp.MustCompile(`^(.+?)__vi\.zip$`)
	var names []string
	err := filepath.WalkDir(root, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		if d.IsDir() {
			return nil
		}
		base := filepath.Base(path)
		if m := re.FindStringSubmatch(base); m != nil {
			names = append(names, m[1])
		}
		return nil
	})
	if err != nil {
		log.Fatalf("walk fonts: %v", err)
	}
	sort.Strings(names)
	outPath := filepath.Join("scripts", "fonts_list.lua")
	if err := os.MkdirAll("scripts", 0755); err != nil {
		log.Fatal(err)
	}
	f, err := os.Create(outPath)
	if err != nil {
		log.Fatalf("create %s: %v", outPath, err)
	}
	defer f.Close()

	fmt.Fprintln(f, "-- Auto-generated by tools/gen_fonts_list.go; DO NOT EDIT")
	fmt.Fprintln(f, "return {")
	for _, n := range names {
		fmt.Fprintf(f, "    \"%s\",\n", n)

		// simple integrity test: try open zip
		zpath := filepath.Join(root, n+"__vi.zip")
		if r, err := zip.OpenReader(zpath); err == nil {
			r.Close()
		} else {
			log.Printf("WARNING: cannot open zip %s: %v", zpath, err)
		}
	}
	fmt.Fprintln(f, "}")
	fmt.Println("fonts_list.lua generated with", len(names), "entries")
}
